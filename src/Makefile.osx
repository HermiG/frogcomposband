# File: Makefile.osx

# Default target
all: install

# Settings
CC = clang
LD = ld
OPT ?= -O2

# Application metadata
NAME = FrogComposband
BUNDLE_IDENTIFIER = org.rephial.angband
EXE = $(NAME)
APPNAME = $(NAME).app
NIB = cocoa/English.lproj/MainMenu.nib

# Architecture and warnings
ARCH = -arch x86_64
#WARNINGS = -W -Wall -Wno-unused-parameter -Wno-missing-field-initializers
WARNINGS = -Wall -Wextra -Wpedantic \
	-Wimplicit-fallthrough \
	-Wformat=2 \
	-Wnull-dereference \
	-Wdouble-promotion \
	-Wswitch-enum \
	-Wcast-align \
	-Wuninitialized \
	-Wstrict-prototypes \
	-Wold-style-definition \
	-Werror=return-type \
	-Werror=incompatible-pointer-types \
	-Wno-shadow \
	-Wno-missing-field-initializers \
	-Wno-unused-parameter \
 	-Wno-missing-prototypes

JUST_C = -std=c99 -Wunreachable-code -Wsometimes-uninitialized -Wno-missing-variable-declarations -Wno-format-nonliteral
OBJ_CFLAGS = -std=c99 -x objective-c
CFLAGS = -g -I. $(WARNINGS) $(OPT) -DMACH_O_CARBON -DHAVE_MKSTEMP -fno-stack-protector $(ARCH) -mmacosx-version-min=10.13
LIBS = -framework Cocoa
DEPLOYMENT_TARGET = MACOSX_DEPLOYMENT_TARGET=10.13

# Import user prefs
-include config

# Borg build support
ifneq (,$(findstring borg, $(MAKECMDGOALS)))
CFLAGS += -DALLOW_BORG
endif

# Config handling
autoconf = $(wildcard autoconf.h)
ifneq ($(autoconf),)
CFLAGS += -DHAVE_CONFIG_H
endif

# Version information
include Makefile.inc
BUNDLE_VERSION := VERSION
CFLAGS += -DBUILD_ID=${VERSION}
OBJS = $(BASEOBJS)
OSX_OBJS = main-cocoa.o

#
# Build the main executable
#
$(EXE).o: $(OBJS)
	@printf "%10s %-20s\n" LD $@
	@$(LD) -r -o $@ $(OBJS)

$(EXE): $(EXE).o $(OSX_OBJS)
	$(DEPLOYMENT_TARGET) $(CC) $(CFLAGS) $(LDFLAGS) -o $(EXE) $(EXE).o $(OSX_OBJS) $(LIBS)

#
# Clean targets
#
clean:
	-rm -f $(OBJS) $(EXE) $(EXE).o $(EXE).o.x86_64 $(OSX_OBJS)
	-rm -rf $(NIB)

#
# Build rules
#
# make seems to hang after a successful build if we have to run this step
%.nib: %.xib
	@printf "%10s %-20s\n" IBTOOL $@
	@xcrun ibtool --compile $@ $<

main-cocoa.o: main-cocoa.m
	@printf "%10s %-20s (objective-c)\n" CC $<
	@$(CC) $(CFLAGS) $(OBJ_CFLAGS) -c -o $@ $<

%.o: %.c
	@printf "%10s %-20s\n" CC $<
	@$(CC) $(JUST_C) $(CFLAGS) -c -o $@ $<

#
# Installation
#
APPBNDL = ../$(APPNAME)
APPCONT = $(APPBNDL)/Contents
APPBIN = $(APPCONT)/MacOS
APPRES = $(APPCONT)/Resources
PLIST = cocoa/Angband-Cocoa.xml
ICONFILES = cocoa/Angband_Icons.icns cocoa/Save.icns cocoa/Edit.icns cocoa/Data.icns
LIBFILES = \
	../lib/edit/*.txt \
	../lib/file/*.txt \
	../lib/help/*.txt \
	../lib/help/html/*.html \
	../lib/pref/*.prf

install: $(EXE) $(NIB) $(ICONFILES) $(PLIST) $(LIBFILES)
	@echo "Creating application structure..."
	@mkdir -p $(APPBIN) $(APPRES)/{English.lproj,lib/{data,edit,file,help/html,pref,script},lib/xtra/{graf,sound}}
	
	@echo "Copying core files..."
	@cp ../lib/edit/*.txt $(APPRES)/lib/edit
	@cp ../lib/file/*.txt $(APPRES)/lib/file
	@cp ../lib/help/*.txt $(APPRES)/lib/help
	@cp ../lib/help/html/*.html $(APPRES)/lib/help/html
	@cp ../lib/pref/*.prf $(APPRES)/lib/pref
	
	@echo "Copying optional graphics and sound assets (if present)..."
	@if [ -d ../lib/xtra/graf ]; then \
		cp ../lib/xtra/graf/graphics.txt $(APPRES)/lib/xtra/graf 2>/dev/null || :; \
		cp ../lib/xtra/graf/*.png $(APPRES)/ 2>/dev/null || :; \
	fi
	@if [ -d ../lib/xtra/sound ]; then \
		cp ../lib/xtra/sound/*.mp3 $(APPRES)/lib/xtra/sound 2>/dev/null || :; \
		cp ../lib/xtra/sound/sound.cfg $(APPRES)/lib/xtra/sound 2>/dev/null || :; \
	fi
	
	@echo "Installing binaries..."
	@install -m 755 $(EXE) $(APPBIN)
	@install -m 644 $(ICONFILES) $(APPRES)
	@cp -R $(NIB) $(APPRES)/English.lproj/
	@cp cocoa/CommandMenu.plist $(APPRES)/
	
	@echo "Generating Info.plist..."
	@sed -e 's/\$$VERSION\$$/$(VERSION)/' \
		-e 's/\$$COPYRIGHT\$$/$(COPYRIGHT)/' \
		-e 's/\$$NAME\$$/$(NAME)/' \
		-e 's/\$$EXECUTABLE\$$/$(EXE)/' \
		-e 's/\$$BUNDLE_VERSION\$$/$(BUNDLE_VERSION)/' \
		-e 's/\$$BUNDLE_IDENTIFIER\$$/$(BUNDLE_IDENTIFIER)/' \
		$(PLIST) > $(APPCONT)/Info.plist
	
	@SetFile -a B $(APPBNDL)
	@echo "Installation complete: $(APPBNDL)"

# Safe install with separate preferences
safe-install:
	$(MAKE) -f Makefile.osx install CFLAGS="-DSAFE_DIRECTORY $(CFLAGS)"
	@sed -e 's/\$$BUNDLE_IDENTIFIER\$$/$(BUNDLE_IDENTIFIER).$(VERSION)/' \
		$(PLIST) > $(APPCONT)/Info.plist

# Distribution package
PACKAGE_NAME = $(NAME)-$(VERSION)
dist: install
	@rm -rf disttemp*
	@mkdir -p disttemp/Docs
	@cp ../readme.txt disttemp/Docs
	@cp -R -p "$(APPBNDL)" disttemp
	@SetFile -a B disttemp/$(APPNAME)
	
	@hdiutil create -quiet -fs HFS+ -volname $(PACKAGE_NAME) -srcfolder disttemp disttemp.dmg
	@hdiutil convert disttemp.dmg -quiet -format UDZO -imagekey zlib-level=6 -o ../"$(PACKAGE_NAME)-osx.dmg"
	@rm -rf disttemp*

# Debug targets
vars:
	@echo LDFLAGS = $(LDFLAGS)
	@echo CFLAGS = $(CFLAGS)
	@echo BASEOBJS = $(BASEOBJS)

tests:
	$(MAKE) -C tests all CFLAGS="-I.. $(CFLAGS)" LDFLAGS="$(LIBS)" DEFAULT_CONFIG_PATH=../lib

test-clean:
	$(MAKE) -C tests clean

.PHONY: all clean install safe-install dist vars tests test-clean

